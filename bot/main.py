import telebot
from telebot import types

from .models import CartProduct, Category, Channel, Client, Order, \
                    OrderProduct, Product, Question, Subcategory
from django.db.models import Sum
from django.conf import settings
import pandas as pd


bot = telebot.TeleBot(settings.TG_TOKEN)

def register_by_message(message) -> bool:
    '''
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î –∏ –≤–Ω–æ—Å–∏—Ç –µ–≥–æ, –µ—Å–ª–∏ —Ç–æ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏.
    '''
    if Client.objects.filter(id=message.chat.id):
        return True
    else:
        full_name = message.chat.first_name
        if message.chat.last_name:
            full_name += ' '+message.chat.last_name
        Client.objects.create(id=message.chat.id, full_name=full_name)
        return False 
    
def mark_order_as_paid(order_id):
    '''–û—Ç–º–µ—á–∞–µ—Ç –∑–∞–∫–∞–∑ –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π'''
    order = Order.objects.get(id=order_id)
    order.pay_status = Order.Status.YES
    order.save()

def clear_cart(user_id):
    '''–û—á–∏—â–∞–µ—Ç –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'''
    CartProduct.objects.filter(client_id=user_id).delete()

def save_order(order_id, filename='orders.xlsx'):
    '''–î–æ–ø–æ–ª–Ω—è–µ—Ç —ç–∫—Å–µ–ª—å –∑–∞–ø–∏—Å—å—é –æ –∑–∞–∫–∞–∑–µ'''
    order = Order.objects.get(id=order_id)
    try:
        existing_data = pd.read_excel(filename)
    except FileNotFoundError:
        existing_data = pd.DataFrame()

    data = {
        'ID –∫–ª–∏–µ–Ω—Ç–∞': [],
        '–ê–¥—Ä–µ—Å': [],
        '–¢–æ–≤–∞—Ä': [],
        '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ': [],
        '–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å': []
    }

    for order_product in order.orderproduct_set.all():
        data['ID –∫–ª–∏–µ–Ω—Ç–∞'].append(order.client.id)
        data['–ê–¥—Ä–µ—Å'].append(order.client.address)
        data['–¢–æ–≤–∞—Ä'].append(order_product.product.name)
        data['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'].append(order_product.quantity)
        data['–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å'].append(order_product.total)

    df = pd.DataFrame(data)
    df = pd.concat([existing_data, df], ignore_index=True)
    df.to_excel(filename, index=False)


def mailing(text, users):
    '''–†–∞—Å—Å—ã–ª–∞–µ—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º'''
    for u in users:
        try:
            bot.send_message(u.id, text, parse_mode='html')
        except Exception as e:
            print(e)


def check_sub(user_id):
    '''–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª—ã'''
    markup = types.InlineKeyboardMarkup()
    channels = Channel.objects.all()
    for c in channels:
        if bot.get_chat_member(chat_id=c.id,
                               user_id=user_id).status == 'left':
            b = types.InlineKeyboardButton(text=c.name, url=c.url)
            markup.add(b)

    if len(markup.to_dict()['inline_keyboard']):
        markup.add(types.InlineKeyboardButton(
            'üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É',
            callback_data='check'
        ))

        bot.send_message(user_id,
                         '–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à–∏ –∫–∞–Ω–∞–ª—ã',
                         reply_markup=markup)
        return False
    else:
        return True


def send_main_menu(user_id):
    '''–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é'''
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton('–ö–∞—Ç–∞–ª–æ–≥')
    btn2 = types.KeyboardButton('–ú–æ—è –∫–æ—Ä–∑–∏–Ω–∞')
    markup.add(btn1, btn2)
    bot.send_message(user_id, text='–û—Ç–∫—Ä—ã—Ç–æ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=markup)


def show_cats(user_id, count, page):
    '''
    –ü–æ–ª—É—á–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∏ –∏–Ω–¥–µ–∫—Å—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏).
    –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    '''
    cats = Category.objects.all()
    total_count = cats.count()
    if total_count == 0:
        return None
    cats = cats[count*page:count*(page+1)]
    markup = types.InlineKeyboardMarkup()

    for c in cats:
        markup.add(types.InlineKeyboardButton(
            c.name, callback_data=f'subcats_{c.id}_{count}_0'))

    btns_page = []
    if page > 0:
        btns_page.append(types.InlineKeyboardButton(
                '<< –ø—Ä–µ–¥. —Å—Ç—Ä.',
                callback_data=f'cats_{count}_{page-1}'
        ))
    if total_count > count:
        btns_page.append(types.InlineKeyboardButton(
                f'{page+1}/{(total_count + count - 1) // count}',
                callback_data=f'cats_{count}_{page}'
        ))

    if count*(page+1) < total_count:
        btns_page.append(types.InlineKeyboardButton(
            '—Å–ª–µ–¥. —Å—Ç—Ä. >>',  callback_data=f'cats_{count}_{page+1}'))

    markup.row(*btns_page)
    bot.send_message(user_id, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é', reply_markup=markup)


def show_subcats(user_id, cat_id, count, page):
    '''
    –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∏ –∏–Ω–¥–µ–∫—Å—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏).
    –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    '''
    subcats = Subcategory.objects.filter(category__id=cat_id)
    total_count = subcats.count()

    subcats = subcats[count*page:count*(page+1)]
    markup = types.InlineKeyboardMarkup()

    for s in subcats:
        markup.add(types.InlineKeyboardButton(
            s.name, callback_data=f'products_{s.id}_3_0'))

    btns_page = []
    if page > 0:
        btns_page.append(types.InlineKeyboardButton(
                '<< –ø—Ä–µ–¥. —Å—Ç—Ä.',
                callback_data=f'subcats_{cat_id}_{count}_{page-1}'
        ))
    if total_count > count:
        btns_page.append(types.InlineKeyboardButton(
                            f'{page+1}/{(total_count + count - 1) // count}',
                            callback_data=f'subcats_{cat_id}_{count}_{page}'
        ))

    if count*(page+1) < total_count:
        btns_page.append(types.InlineKeyboardButton(
                '—Å–ª–µ–¥. —Å—Ç—Ä. >>',
                callback_data=f'subcats_{cat_id}_{count}_{page+1}'
        ))

    markup.row(*btns_page)
    markup.add(types.InlineKeyboardButton(
                '–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º',
                callback_data=f'cats_{count}_0'
    ))

    bot.send_message(user_id, '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é', reply_markup=markup)


def show_products(user_id, subcat_id, count, page):
    '''
    –ü–æ–ª—É—á–∞–µ—Ç —Ç–æ–≤–∞—Ä—ã –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∏ –∏–Ω–¥–µ–∫—Å—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏).
    –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    '''
    products = Product.objects.filter(subcategory__id=subcat_id)
    total_count = products.count()
    if total_count == 0:
        show_cats(user_id, 4, 0)
        return

    products = products[count*page:count*(page+1)]

    rms = []

    for p in products:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton(
            '–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É', callback_data=f'cart_add_{p.id}'))
        rms.append(markup)

    markup = rms[-1]
    btns_page = []
    if page > 0:
        btns_page.append(types.InlineKeyboardButton(
                '<< –ø—Ä–µ–¥. —Å—Ç—Ä.',
                callback_data=f'products_{subcat_id}_{count}_{page-1}'
        ))
    if total_count > count:
        btns_page.append(
            types.InlineKeyboardButton(
                f'{page+1}/{(total_count + count - 1) // count}',
                callback_data=f'products_{subcat_id}_{count}_{page}'
            )
        )

    if count*(page+1) < total_count:
        btns_page.append(types.InlineKeyboardButton(
                    '—Å–ª–µ–¥. —Å—Ç—Ä. >>',
                    callback_data=f'products_{subcat_id}_{count}_{page+1}'
                ))

    markup.row(*btns_page)
    markup.add(
        types.InlineKeyboardButton(
            '–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è–º',
            callback_data=f'subcats_{products[0].subcategory.category.id}_4_0'
        )
    )

    for i, p in enumerate(products):
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton(
                    '–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É',
                    callback_data=f'cart_add_{p.id}'
        ))
        bot.send_photo(
            chat_id=user_id,
            photo=p.image,
            caption=f'<b>{p.name} - {p.price:.2f} —Ä—É–±.</b>' \
                    f'\n\n{p.description}',
            parse_mode='HTML',
            reply_markup=rms[i]
        )


def ask_quantity(user_id, product_id):
    '''–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞'''
    product = Product.objects.filter(id=product_id).first()

    markup = types.InlineKeyboardMarkup()

    r1 = []
    r2 = []
    for i in range(1, 6):
        r1.append(types.InlineKeyboardButton(
                    f'{i}',
                    callback_data=f'cart_add_q_{product_id}_{i}'
        ))

    for i in range(6, 11):
        r2.append(types.InlineKeyboardButton(
                    f'{i}',
                    callback_data=f'cart_add_q_{product_id}_{i}'
        ))

    markup.row(*r1)
    markup.row(*r2)

    bot.send_photo(
        chat_id=user_id,
        photo=product.image,
        caption=f'<b>{product.name} - {product.price:.2f} —Ä—É–±.</b>' \
                f'\n{product.description}' \
                f'\n\n<b>–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏</b>',
        parse_mode='HTML',
        reply_markup=markup
        )


def ask_confirm(user_id, product_id, quantity):
    '''–û—Ç—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É'''
    product = Product.objects.filter(id=product_id).first()

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('–î–∞, –¥–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É',
               callback_data=f'cart_confirm_add_{product_id}_{quantity}'))
    markup.add(types.InlineKeyboardButton(
        '–û—Ç–º–µ–Ω–∏—Ç—å', callback_data='cats_4_0'))

    bot.send_photo(
        chat_id=user_id,
        photo=product.image,
        caption=f'<b>{product.name} - {product.price:.2f} —Ä—É–±.\n</b>' \
                f'{product.description}\n\n'\
                f'<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity}\n'\
                f'–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ' \
                f'{quantity*product.price:.2f} —Ä—É–±</b>' \
                f'\n<b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É</b>', \
        parse_mode='HTML', reply_markup=markup)


def cart_add(user_id, product_id, quantity):
    '''–î–æ–±–∞–≤–ª—è–µ—Ç –≤ –∫–æ—Ä–∑–∏–Ω—É'''
    p = Product.objects.get(id=product_id)
    cartp = CartProduct.objects.filter(
        client_id=user_id, product_id=product_id).first()
    if cartp:
        cartp.quantity = quantity
        cartp.total = quantity * p.price
        cartp.save()
        bot.send_message(user_id, '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ –∏–∑–º–µ–Ω–µ–Ω–æ')
    else:
        CartProduct.objects.create(
            client_id=user_id,
            product_id=product_id,
            quantity=quantity,
            total=quantity*p.price
        )
        bot.send_message(user_id, '–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É')


def cart_show(user_id, count, page):
    '''
    –í—ã–≤–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–æ—Ä–∑–∏–Ω—É.
    count –∏ page, –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –≤—ã–≤–æ–¥—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π, –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∫–Ω–æ–ø–æ–∫ —É–¥–∞–ª–µ–Ω–∏—è
    '''
    all_cproducts = CartProduct.objects.filter(client_id=user_id)
    if not all_cproducts:
        bot.send_message(user_id, '–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞')
        return
    total_count = all_cproducts.count()
    cproducts = all_cproducts[count*page:count*(page+1)]

    rms = []
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('üí≥ –û–ø–ª–∞—Ç–∏—Ç—å',
                                          callback_data='cart_buy'))

    for p in cproducts:
        markup.add(types.InlineKeyboardButton(
            f'‚ùå {p.product.name}',
            callback_data=f'cart_del_{p.product.id}'
        ))
        rms.append(markup)

    btns_page = []
    if page > 0:
        btns_page.append(types.InlineKeyboardButton(
            '<< –ø—Ä–µ–¥. —Å—Ç—Ä.', callback_data=f'cart_show_{count}_{page-1}'))
    if total_count > count:
        btns_page.append(types.InlineKeyboardButton(
            f'{page+1}/{(total_count + count - 1) // count}',
            callback_data=f'cart_show_{count}_{page}')
        )

    if count*(page+1) < total_count:
        btns_page.append(types.InlineKeyboardButton(
            '—Å–ª–µ–¥. —Å—Ç—Ä. >>',  callback_data=f'cart_show_{count}_{page+1}'))

    markup.row(*btns_page)

    text = ''
    for p in all_cproducts:
        text += f'{p.product.name} ({p.quantity} —à—Ç.) - {p.total:.2f} —Ä—É–±.\n'

    total_sum = all_cproducts.aggregate(Sum('total'))['total__sum']
    text += f'\n<B>–û–±—â–∞—è —Å—É–º–º–∞: {total_sum:.2f} —Ä—É–±.</B>'

    bot.send_message(user_id, text, parse_mode='HTML', reply_markup=markup)


def cart_del(user_id, product_id):
    '''–£–¥–∞–ª—è–µ—Ç —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã'''
    CartProduct.objects.filter(
        client_id=user_id, product_id=product_id).delete()


def handle_address(message):
    '''–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞'''
    markup = types.InlineKeyboardMarkup()

    markup.add(types.InlineKeyboardButton(
        '–í–µ—Ä–Ω–æ', callback_data=f'confirm_address_{message.text}'))
    markup.add(types.InlineKeyboardButton(
        '–ù–µ—Ç, –∏–∑–º–µ–Ω–∏—Ç—å', callback_data='cart_buy'))

    markup.add(types.InlineKeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥',
                                          callback_data='cart_show_5_0'))
    bot.send_message(
        message.chat.id,
        f'–í–∞—à –∞–¥—Ä–µ—Å: {message.text}\n\n–í—Å–µ –≤–µ—Ä–Ω–æ?',
        reply_markup=markup
    )


def save_address(user_id, address):
    '''–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∞–¥—Ä–µ—Å'''
    user = Client.objects.get(id=user_id)
    user.address = address
    user.save()


def send_invoice(user_id):
    '''–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç  —Å—á–µ—Ç'''
    all_cproducts = CartProduct.objects.filter(client_id=user_id)
    if not all_cproducts:
        bot.send_message(user_id, '–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞')
        return

    text = ''
    order = Order.objects.create(
        client_id=user_id,
        address=Client.objects.get(id=user_id).address
    )
    for p in all_cproducts:
        OrderProduct.objects.create(
            order=order,
            product=p.product,
            quantity=p.quantity,
            total=p.total
        )

        text += f'{p.product.name} ({p.quantity} —à—Ç.) - {p.total:.2f} —Ä—É–±.\n'

    total_sum = all_cproducts.aggregate(Sum('total'))['total__sum']

    order.total_amount = total_sum
    order.save()

    text += f'\n–û–±—â–∞—è —Å—É–º–º–∞: {total_sum:.2f} —Ä—É–±.'

    bot.send_invoice(
        user_id,
        title='–û–ø–ª–∞—Ç–∞',
        description=text,
        provider_token=settings.YK_TOKEN,
        currency='rub',
        is_flexible=False,
        prices=[types.LabeledPrice(
            label='–û–±—â–∞—è —Å—É–º–º–∞',
            amount=int(total_sum * 100)
        )],
        invoice_payload=str(order.id),
        start_parameter='example'
    )


def get_faq(query):
    '''–ü–æ–ª—É—á–µ—Ç –≤–æ–ø—Ä–æ—Å—ã –ø–æ –∏—Ö –Ω–∞—á–∞–ª—É –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–ª—è inline –æ—Ç–≤–µ—Ç–∞'''
    qs = Question.objects.filter(q__istartswith=query)
    result = []
    for i, q in enumerate(qs):
        result.append(
            telebot.types.InlineQueryResultArticle(
                id=i,
                title=q.q,
                description=q.a,
                input_message_content=telebot.types.InputTextMessageContent(
                    f'<b>–í–æ–ø—Ä–æ—Å:</b> {q.q}\n<b>–û—Ç–≤–µ—Ç:</b>{q.a}',
                    parse_mode='HTML'
                )
            )
        )
    return result
